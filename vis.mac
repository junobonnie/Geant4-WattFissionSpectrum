# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0

# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors

# Draw geometry:
/vis/drawVolume

# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 120 150
/vis/viewer/set/lightsVector -1 0 0

# Specify style (surface, wireframe, auxiliary edges,...)
/vis/viewer/set/style wireframe
/vis/viewer/set/auxiliaryEdge true
/vis/viewer/set/lineSegmentsPerCircle 100

# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)

# Draw hits at end of event:
#/vis/scene/add/hits

# Decoration
#/vis/scene/add/axes    # Simple axes: x=red, y=green, z=blue.

/vis/geometry/set/colour World 0 1 0 0 .1
/vis/geometry/set/colour Shield 0 1 1 1 .2
/vis/geometry/set/colour Detector 0 0 1 0 .2

# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
/vis/scene/endOfRunAction accumulate # if you using cry

# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
